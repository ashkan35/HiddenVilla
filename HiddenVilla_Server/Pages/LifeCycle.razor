@page "/lifecycle"
@inject IJSRuntime JsRuntime
<PageTitle>Counter</PageTitle>

<h1>Life Cycle</h1>
<h3>@string.Join("-",Message)</h3>
<div>
    <LifeCycleComponent TestParam="Param"></LifeCycleComponent>
</div>
<button class="btn btn-success" @onclick="ChangeParameter">Change Param</button>
<button class="btn btn-success" @onclick="ChangeState">Change State</button><span>@StateTest</span>
<div></div>
@code {
    public int Param = 10;
    public int StateTest { get; set; } = 1000;
    protected void ChangeParameter()
    {
        Param *= 5;
    }
    public List<string> Message = new List<string>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        //InvokeAsync(StateHasChanged);
        Message.Add("Hi I am OnInitialized");
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        Message.Add("Hi! I Am OnInitializedAsync");
    }

    protected override void OnParametersSet()
    {
        Message.Add("Hi I am OnParameterSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Message.Add("Hi! I Am OnParameterSetAsync");
    }

    protected override void OnAfterRender(bool firstRender)
    {
         //JsRuntime.InvokeVoidAsync("alert", "AfterRender!");
        Message.Add("On After Render Has Called!");
    }

    protected override bool ShouldRender()
    {
        Message.Add("Should Render Called");
        return base.ShouldRender();
    }

     void ChangeState()
    {
        var timer = new System.Threading.Timer(TimeCallBack,null, 1000, 1000);
         //for(int i=0;i<1000;i++)
         //    TimeCallBack(null);

    }

     void TimeCallBack(object state)
    {
        if (StateTest > 0)
        {
            StateTest--;
            InvokeAsync(StateHasChanged);
        }
    }

}
